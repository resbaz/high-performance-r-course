library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m = lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
profvis::profvis({data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m = lm(price ~ carat, data = diamonds)
abline(m, col = "red")})
profvis::profvis({data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m = lm(price ~ carat, data = diamonds)
abline(m, col = "red")})
profvis({
new_diamonds = read.csv2("datasets/new_diamonds.csv")
new_diamonds2 = read.csv2("datasets/new_diamonds.csv", colClasses = c("numeric",
"character","numeric"))
})
create_vector =function(n){
vec = c()
for(i in 1:n){
vec=c(vec,i)
}
}
microbenchmark(
newvector = c(1:1000),
newvector2 = create_vector(1000)
)
library(microbenchmark)
create_vector =function(n){
vec = c()
for(i in 1:n){
vec=c(vec,i)
}
}
microbenchmark(
newvector = c(1:1000),
newvector2 = create_vector(1000)
)
lapply2 <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
lapply2_c <- compiler::cmpfun(lapply2)
x=list(1:200,1:100,100:340,10:90000)
microbenchmark(
lapply2(x,sd),
lapply2_c(x,sd),
lapply(x,sd)
)
lapply2 <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
lapply2_c <- compiler::cmpfun(lapply2)
x=list(1:200,1:100,100:340,10:90000)
microbenchmark(
lapply2(x,sd),
lapply2_c(x,sd),
lapply(x,sd)
)
lapply2 <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
lapply2_c <- compiler::cmpfun(lapply2)
x=list(1:200,1:100,100:340,10:90000)
microbenchmark(
lapply2(x,sd),
lapply2_c(x,sd),
lapply(x,sd)
)
lapply2 <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
lapply2_c <- compiler::cmpfun(lapply2)
x=list(1:200,1:100,100:340,10:90000)
microbenchmark(
lapply2(x,sd),
lapply2_c(x,sd),
lapply(x,sd)
)
library(parallel)
detectCores()
detectCores(logical=TRUE)
detectCores(logical=FALSE)
install.packages("lme4")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
# newDiamonds=rbind(diamonds, diamonds,diamonds, diamonds)
# newDiamonds2 = newDiamonds %>% select(carat,cut, price)
# write.csv2(newDiamonds2,file="new_diamonds.csv",row.names=FALSE)
profvis({
new_diamonds = read.csv2("datasets/new_diamonds.csv")
new_diamonds2 = read.csv2("datasets/new_diamonds.csv", colClasses = c("numeric",
"character","numeric"))
})
library(microbenchmark)
diamonds_num = new_diamonds[,c(1,3)]
microbenchmark(
base::colMeans(diamonds_num),
apply(diamonds_num,2,mean)
)
create_vector =function(n){
vec = c()
for(i in 1:n){
vec=c(vec,i)
}
}
microbenchmark(
newvector = c(1:1000),
newvector2 = create_vector(1000)
)
lapply2 <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
lapply2_c <- compiler::cmpfun(lapply2)
x=list(1:200,1:100,100:340,10:90000)
microbenchmark(
lapply2(x,sd),
lapply2_c(x,sd),
lapply(x,sd)
)
library(Rcpp)
cppFunction('int mult(int x, int y) {
int prod = x * y;
return prod;
}')
x=17635
y=10002
microbenchmark(
a=x*y,
b=mult(x,y)
)
library(Rcpp)
cppFunction('int mult(int x, int y) {
int prod = x * y;
return prod;
}')
x=17635
y=10002
microbenchmark(
a=x*y,
b=mult(x,y)
)
library(dplyr)
library(parallel)
titanic = read.csv("https://goo.gl/4Gqsnz")
titanic= na.omit(titanic)
sample_mean =function(i){
mean_Age = titanic %>%
sample_n(20) %>%
summarise(mean_age=mean(Age)) %>%
pull(mean_age)
return(mean_Age)
}
system.time(lapply(1:10000, sample_mean))
system.time(mclapply(1:10000, sample_mean))
